import {ComboBox, VerticalBox, HorizontalBox, GridBox, Button, LineEdit, ListView} from "sixtyfps_widgets.60";

struct Diag := {
    short: string,
    expanded: string,
    level: int, // 0 = other, 1 = error, 2 = warning, 3 = note

}

struct Action := {
    command: string,
    package: string,
    profile: string,
    extra: string, // bin or test name
}

BuildingPane := Rectangle {
    callback cancel <=> cancel_btn.clicked;
    callback back <=> back_btn.clicked;
    property <bool> is_building;
    property status <=> status_text.text;
    property <[Diag]> errors: [
        // just some placeholder for testing
        {short: "Hallo", expanded: "Hello\nworld", level: 1 },
        {short: "Hallo", expanded: "Hello\nworld", level: 2 },
        {short: "Hallo", expanded: "Hello\nworld", level: 3 },
        {short: "Hallo", expanded: "Hello\nworld", level: 0 }
    ];

    // capture all clicks
    TouchArea {}

    VerticalBox {
        status_text := Text { }

        ListView {
            viewport_width: width;
            VerticalBox {
                alignment: start;
                for error in errors : TouchArea {
                    property<bool> expanded;
                    clicked => { expanded = !expanded }
                    enabled: error.expanded != "";
                    animate height { duration: 150ms; easing: ease; }
                    HorizontalBox {
                        if (enabled) : Text {
                            text: !expanded ? "‚ñ∂": "‚ñº";
                        }
                        Text {
                            horizontal_stretch: 1;
                            color: {
                                error.level == 1 ? #a44 :
                                error.level == 2 ? #aa4 :
                                error.level == 3 ? #44a :
                                #444;
                            };
                            property <string> level_txt: {
                                error.level == 1 ? "error: " :
                                error.level == 2 ? "warning: " :
                                error.level == 3 ? "info: " :
                                "";
                            }
                            text: !expanded ? (level_txt + error.short) : error.expanded;
                            wrap: word_wrap;

                        }
                    }
                }
            }
        }
        HorizontalBox {
            alignment: space_between;
            cancel_btn := Button {
                enabled: is_building;
                text: "‚ùå Cancel";
                height: min_height;
            }
            back_btn := Button {
                enabled: !is_building;
                text: "üîô Back";
                height: min_height;
            }

        }
    }
}

CargoUI := Window {
    title: "Cargo UI";
    preferred_height: 500px;
    preferred_width: 300px;

    property <string> status;
    property <[string]> packages;
    property <[string]> extra_run;
    property <[string]> extra_test;
    property <bool> has_extra_tests : true; // Remove, once we can query the length of models in .60
    callback action(Action);
    callback cancel;
    property <bool> is_building : false;
    property <[Diag]> errors;
    property <bool> workspace_valid : true;
    property <string> manifest_path <=> le_manifest.text;
    callback reload_manifest(string);
    callback show_open_dialog;
    property <bool> build_pane_visible;

    // required because of a bug in sixtyfps 0.1.0 (fixed by e633ee82)
    property <Action> ignore_me;

    VerticalBox {
        //alignment: start;

        GridBox {
            Row {
                Text { text: "Manifest:"; vertical-alignment: center; horizontal-alignment: right; }
                HorizontalLayout {
                    colspan: 3;
                    le_manifest := LineEdit {
                        accepted => { root.reload_manifest(le_manifest.text); }
                        horizontal_stretch: 1;
                    }
                    Button {
                        text: "üìÇ";
                        clicked => { root.show_open_dialog(); }
                    }
                }
            }
    
            Row {
                Text { text: "Package:"; vertical-alignment: center; horizontal-alignment: right; }
                package_cb := ComboBox {
                    model: packages;
                    enabled: root.workspace_valid;
                }
                Text { text: "Profile: "; vertical-alignment: center; horizontal-alignment: right; }
                mode_cb := ComboBox { current_value: "debug"; model: ["debug", "release"]; enabled: root.workspace_valid; }
                //Text { text: "Toolchain: "; }
                //profile_cb := ComboBox { model: ["stable", "nightly"]; }
            }

            Row {
                Button {
                    text: "üöÄ Run";
                    enabled: root.workspace_valid;
                    clicked => {
                        build_pane_visible = true;
                        action({
                            command: "run",
                            package: package_cb.current_value,
                            profile: mode_cb.current_value,
                            extra: bin_cb.current_value
                        });
                    }
                }
                bin_cb := ComboBox {
                    model: extra_run;
                    enabled: root.workspace_valid;
                    colspan: 3;
                }
            }

            Row {
                Button {
                    text: "üèóÔ∏è Build";
                    enabled: root.workspace_valid;
                    clicked => {
                        build_pane_visible = true;
                        action({
                            command: "build",
                            package: package_cb.current_value,
                            profile: mode_cb.current_value,
                            extra: ""
                        });
                    }
                }
            }

            Row {
                Button {
                    text: "üëç Check";
                    enabled: root.workspace_valid;
                    clicked => {
                        build_pane_visible = true;
                        action({
                            command: "check",
                            package: package_cb.current_value,
                            profile: mode_cb.current_value,
                            extra: ""
                        });
                    }
                }
            }

            Row {
                Button {
                    text: "üß™ Test";
                    enabled: root.workspace_valid;
                    clicked => {
                        build_pane_visible = true;
                        action({
                            command: "test",
                            package: package_cb.current_value,
                            profile: mode_cb.current_value,
                            extra: test_cb.current_value,
                        });
                    }
                }
                test_cb := ComboBox {
                    model: extra_test;
                    enabled: root.workspace_valid && root.has_extra_tests;
                    colspan: 3;
                }
            }

        }

        Rectangle { min-height: 40px; }

        Text { text: status; wrap: word_wrap; overflow: elide; }
    }

    animated := Rectangle {
        width: 100%; height: 100%;
        y: parent.height;
        states [
            visible when (is_building || build_pane_visible) : {
                y: 0;
            }
        ]
        transitions [
            in visible : {
                animate y { duration: 200ms; easing: ease; }
            }
            out visible : {
                animate y { duration: 200ms; easing: ease; }
            }
        ]
        if (animated.y < root.height): BuildingPane {
            background: root.background;
            status: root.status;
            errors: root.errors;
            cancel => { root.cancel() }
            back => { build_pane_visible = false; }
            is_building: root.is_building;
        }
    }
}