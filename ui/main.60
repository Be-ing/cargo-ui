/* Copyright Â© 2021 SixtyFPS GmbH <info@sixtyfps.info>
 * SPDX-License-Identifier: MIT OR Apache-2.0
 */

import {
    ComboBox, VerticalBox, HorizontalBox, GridBox, Button,
    LineEdit, ListView, GroupBox, CheckBox, TabWidget
} from "sixtyfps_widgets.60";

import {
    Action, Feature, CargoView, Diag, DependencyNode, BuildingPane
} from "cargo.60";

import { Toolchain, RustupView } from "rustup.60";

CargoUI := Window {
    title: "Cargo UI";
    preferred_height: 500px;
    preferred_width: 300px;

    // Cargo aliases
    property status <=> cargo-view.status;
    property packages <=> cargo-view.packages;
    property allow_package_selection <=> cargo-view.allow_package_selection;
    property current_package <=> cargo-view.current_package;
    property extra_run <=> cargo-view.extra_run;
    property extra_test <=> cargo-view.extra_test;
    property has_extra_tests <=> cargo-view.has_extra_tests;
    callback action <=> cargo-view.action;
    callback cancel <=> cargo-view.cancel;
    property is_building <=> cargo-view.is_building;
    property diagnostics <=> cargo-view.diagnostics;
    property workspace_valid <=> cargo-view.workspace_valid;
    property manifest_path <=> cargo-view.manifest_path;
    property build_results <=> cargo-view.build_results;
    property check_results <=> cargo-view.check_results;
    callback reload_manifest <=> cargo-view.reload_manifest;
    callback show_open_dialog <=> cargo-view.show_open_dialog;
    property build_pane_visible <=> cargo-view.build_pane_visible;
    property deptree_pane_visible <=> cargo-view.deptree_pane_visible;
    property deptree <=> cargo-view.deptree;
    property has_features <=> cargo-view.has-features;
    property package_features <=> cargo-view.package-features;
    property enable-default-features <=> cargo-view.enable-default-features;
    callback package_selected <=> cargo-view.package_selected;

    // Rustup aliases
    property toolchains <=> rustup-view.toolchains;

    VerticalBox {

        TabWidget {
            Tab {
                title: "Project / Workspace";

                cargo-view := CargoView {
                    background: root.background;
                }
            }

            Tab {
                title: "Toolchains";

                rustup-view := RustupView {

                }
            }
        }
    }

    animated := Rectangle {
        width: 100%; height: 100%;
        y: parent.height;
        states [
            visible when (is_building || build_pane_visible) : {
                y: 0;
            }
        ]
        transitions [
            in visible : {
                animate y { duration: 200ms; easing: ease; }
            }
            out visible : {
                animate y { duration: 200ms; easing: ease; }
            }
        ]
        if (animated.y < root.height): BuildingPane {
            background: root.background;
            status: root.status;
            diagnostics: root.diagnostics;
            cancel => { root.cancel() }
            back => { build_pane_visible = false; }
            is_building: root.is_building;
        }
    }
}
